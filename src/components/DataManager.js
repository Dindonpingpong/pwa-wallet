import React, { useState } from 'react';
import {
  Paper,
  Typography,
  Button,
  Box,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Divider,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import {
  Backup as BackupIcon,
  Restore as RestoreIcon,
  Delete as DeleteIcon,
  Warning as WarningIcon,
} from '@mui/icons-material';

const DataManager = ({ transactions, wallets, onImportData, onClearData }) => {
  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);
  const [isClearDialogOpen, setIsClearDialogOpen] = useState(false);
  const [importData, setImportData] = useState('');
  const [importError, setImportError] = useState('');
  const [importSuccess, setImportSuccess] = useState('');

  const exportData = () => {
    const data = {
      transactions,
      wallets,
      version: '1.0',
      exportedAt: new Date().toISOString()
    };

    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `financial-backup-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    URL.revokeObjectURL(link.href);
  };

  const handleImport = () => {
    try {
      if (!importData.trim()) {
        setImportError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        return;
      }

      const parsedData = JSON.parse(importData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!parsedData.transactions || !parsedData.wallets) {
        setImportError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å transactions –∏ wallets');
        return;
      }

      if (!Array.isArray(parsedData.transactions) || !Array.isArray(parsedData.wallets)) {
        setImportError('–î–∞–Ω–Ω—ã–µ transactions –∏ wallets –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏');
        return;
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
      if (window.confirm(
        `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${parsedData.transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ ${parsedData.wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤? ` +
        '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.'
      )) {
        onImportData(parsedData);
        setImportSuccess('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
        setImportData('');
        setImportError('');
        setTimeout(() => setIsImportDialogOpen(false), 1500);
      }

    } catch (error) {
      setImportError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ' + error.message);
    }
  };

  const handleFileImport = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      setImportData(e.target.result);
      setImportError('');
    };
    reader.onerror = () => {
      setImportError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    };
    reader.readAsText(file);
  };

  const handleClearData = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      onClearData();
      setIsClearDialogOpen(false);
    }
  };

  const getStats = () => ({
    transactions: transactions.length,
    wallets: wallets.length,
    totalIncome: transactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0),
    totalExpenses: transactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0)
  });

  const stats = getStats();

  return (
    <Paper elevation={3} sx={{ p: 3 }}>
      <Typography variant="h6" gutterBottom>
        üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
      </Typography>

      <Box sx={{ mb: 3 }}>
        <Typography variant="body2" color="textSecondary" gutterBottom>
          –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        </Typography>
        <List dense>
          <ListItem>
            <ListItemText primary={`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.transactions}`} />
          </ListItem>
          <ListItem>
            <ListItemText primary={`–ö–æ—à–µ–ª—å–∫–æ–≤: ${stats.wallets}`} />
          </ListItem>
          <ListItem>
            <ListItemText primary={`–û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.totalIncome.toFixed(2)}`} />
          </ListItem>
          <ListItem>
            <ListItemText primary={`–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${stats.totalExpenses.toFixed(2)}`} />
          </ListItem>
        </List>
      </Box>

      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
        <Button
          variant="contained"
          color="primary"
          startIcon={<BackupIcon />}
          onClick={exportData}
          fullWidth
        >
          –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        </Button>

        <Button
          variant="outlined"
          color="primary"
          startIcon={<RestoreIcon />}
          onClick={() => setIsImportDialogOpen(true)}
          fullWidth
        >
          –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        </Button>

        <Divider />

        <Button
          variant="outlined"
          color="error"
          startIcon={<DeleteIcon />}
          onClick={() => setIsClearDialogOpen(true)}
          fullWidth
          disabled={transactions.length === 0 && wallets.length <= 1}
        >
          –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        </Button>
      </Box>

      {/* –î–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ */}
      <Dialog 
        open={isImportDialogOpen} 
        onClose={() => setIsImportDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <RestoreIcon />
            –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </Box>
        </DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="textSecondary" gutterBottom>
            –í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
          </Typography>

          {importSuccess && (
            <Alert severity="success" sx={{ mb: 2 }}>
              {importSuccess}
            </Alert>
          )}

          {importError && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {importError}
            </Alert>
          )}

          <Box sx={{ mb: 2 }}>
            <Button
              variant="outlined"
              component="label"
              fullWidth
              startIcon={<BackupIcon />}
            >
              –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
              <input
                type="file"
                accept=".json,application/json"
                hidden
                onChange={handleFileImport}
              />
            </Button>
          </Box>

          <textarea
            value={importData}
            onChange={(e) => setImportData(e.target.value)}
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å..."
            style={{
              width: '100%',
              minHeight: '200px',
              fontFamily: 'monospace',
              fontSize: '14px',
              padding: '8px',
              border: '1px solid #ccc',
              borderRadius: '4px',
              resize: 'vertical'
            }}
          />

          <Alert severity="warning" sx={{ mt: 2 }}>
            <WarningIcon />
            –í–Ω–∏–º–∞–Ω–∏–µ: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsImportDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleImport} 
            variant="contained"
            disabled={!importData.trim()}
          >
            –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏ */}
      <Dialog 
        open={isClearDialogOpen} 
        onClose={() => setIsClearDialogOpen(false)}
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <WarningIcon color="error" />
            –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
          </Box>
        </DialogTitle>
        <DialogContent>
          <Alert severity="error" sx={{ mb: 2 }}>
            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∫–æ—à–µ–ª—å–∫–∏ (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ). 
            –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
          </Alert>
          <Typography>
            –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: {stats.transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ {stats.wallets} –∫–æ—à–µ–ª—å–∫–æ–≤
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsClearDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onClick={handleClearData} 
            variant="contained"
            color="error"
          >
            –£–¥–∞–ª–∏—Ç—å –≤—Å–µ
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default DataManager;